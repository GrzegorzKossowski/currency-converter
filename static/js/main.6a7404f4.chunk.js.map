{"version":3,"sources":["config/config.js","services/httpService.js","config/endpoints.js","api/local.api.js","components/converter/Converter.jsx","api/converter.api.js","components/history-list/HistoryList.jsx","components/history-tab/HistoryTab.jsx","components/api-alert/ApiAlert.jsx","views/home-page/HomePage.jsx","components/error-handling/ErrorBoundary.jsx","App.js","serviceWorker.js","index.js"],"names":["CONFIG","HOST","API_KEY","HttpService","_getUrl","endpoint","_getHost","config","Error","_resolveHeaders","customHeaders","headers","get","options","axios","method","url","then","response","status","onSuccess","data","catch","error","console","log","this","Accept","ENDPOINTS","CONVERTER","CURRENCIES","COUNTRIES","USAGE","fetchLocalStorage","key","Storage","JSON","parse","localStorage","getItem","Converter","props","formState","setFormState","historyList","setHistoryList","useState","currencies","setCurrencies","isDisabled","setIsDisabled","history","useHistory","useEffect","getAllCurrencies","amount","Promise","resolve","reject","onError","Object","keys","results","map","id","sort","fromCurrency","toCurrency","handleChange","event","target","value","name","className","Form","onSubmit","preventDefault","newScore","values","score","newConversion","today","Date","toJSON","slice","split","reverse","join","before","after","parseFloat","toFixed","localData","setItem","stringify","newData","updateLocalStorage","push","Group","Label","Control","as","onChange","readOnly","element","index","icon","faExchangeAlt","data-config-id","size","color","type","disabled","HistoryList","length","faLongArrowAltRight","Button","variant","onClick","clear","HistoryTab","isHistoryOn","locPaht","window","location","pathname","to","faTimes","ApiAlert","expenditure","setExpenditure","Alert","usage","calculateUsage","limit","initialState","HomePage","newLocal","Container","fluid","Row","Col","Component","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6a7404f4.chunk.js","sourcesContent":["const CONFIG = {\n    HOST: 'https://free.currconv.com',\n    API_KEY: 'd44b5d43258c64da53fc',\n};\n\nexport default CONFIG;\n","import axios from 'axios';\nimport config from '../config/config'\n\nclass HttpService {\n    constructor() {\n        this.headers = {\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n        };\n    }\n\n    _getUrl = (endpoint) => {\n        return this._getHost() + endpoint;\n    };\n\n    _getHost = () => {\n        const HOST = config.HOST;\n        if (!HOST) throw new Error('Cannot get host address from config file');\n        return HOST;\n    };\n\n    _resolveHeaders = (customHeaders = {}) => {\n        return { ...this.headers, ...customHeaders };\n    };\n\n    get = options => axios({\n        headers: this._resolveHeaders(options.headers),\n        method: 'GET',\n        url: this._getUrl(options.endpoint),\n    })\n        .then(response => {\n            if (response.status >= 200 && response.status < 300) {\n                options.onSuccess(response.data);\n            } else {\n                throw new Error('Data not loaded', response);\n            }\n\n        })\n        .catch(error => console.log(error))\n\n\n}\n\nexport default HttpService;","const ENDPOINTS = {\n    CONVERTER: '/api/v7/convert',\n    CURRENCIES: '/api/v7/currencies',\n    COUNTRIES: '/api/v7/countries',\n    USAGE: '/others/usage',\n};\n\nexport default ENDPOINTS;","export const fetchLocalStorage = (key) => {\n    let localData = null;\n    if (typeof (Storage) !== \"undefined\") {\n        localData = JSON.parse(localStorage.getItem(key));\n    } else {\n        throw new Error('No Web Storage support..');\n    }\n    return localData;\n}\n\nexport const updateLocalStorage = (key, value) => {\n    let localData = fetchLocalStorage(key);\n    if (localData === null) {\n        localStorage.setItem(key, JSON.stringify([value]));\n    } else {\n        let newData = [\n            { ...value },\n            ...localData,\n        ]\n        localStorage.setItem(key, JSON.stringify(newData));\n    }\n}\n\nexport const clearLocalStorage = () => {\n    localStorage.clear();\n}","import React, { useState, useEffect } from \"react\";\nimport \"./converter.styles.scss\";\nimport { Form } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExchangeAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  fetchConversionData,\n  fetchAllCurrencies,\n} from \"../../api/converter.api\";\nimport {\n  updateLocalStorage,\n} from \"../../api/local.api\";\n\nconst Converter = props => {\n  const { formState, setFormState, historyList, setHistoryList } = props;\n  const [currencies, setCurrencies] = useState([]);\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    getAllCurrencies();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(()=>{\n    setIsDisabled(true);\n    if(formState.amount > 0) {\n      setIsDisabled(false);\n    }\n  },[formState.amount])\n\n  const getAllCurrencies = () => {\n      fetchAllCurrencies()\n      .then(data => {\n        const currencies = Object.keys(data.results)\n          .map(key => data.results[key].id)\n          .sort();\n        setCurrencies(currencies);\n        return currencies;\n      })\n      .then(data => {\n        setFormState({\n          ...formState,\n          fromCurrency: data[0],\n          toCurrency: data[0]\n        });\n      });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n      fetchConversionData(formState.fromCurrency, formState.toCurrency)\n      .then(data => {\n        let eRate = Object.values(data)[0];\n        let newScore = eRate * formState.amount;\n        setFormState({\n          ...formState,\n          score: newScore\n        });\n        return newScore;\n      })\n      .then(newScore => {\n        let newConversion = {\n          today: new Date()\n            .toJSON()\n            .slice(0, 10)\n            .split(\"-\")\n            .reverse()\n            .join(\".\"),\n          before: formState.amount + \" \" + formState.fromCurrency,\n          after: parseFloat(newScore).toFixed(2) + \" \" + formState.toCurrency\n        };\n        setHistoryList([newConversion, ...historyList]);\n        updateLocalStorage(\"history\", newConversion);\n      })\n      .then(() => {\n        history.push(\"/history\");\n      });\n  };\n\n  const handleChange = event => {\n    const { value, name } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className='converter-main'>\n      <Form onSubmit={handleSubmit} className='converter-form'>\n        <h2>Konwerter walut</h2>\n        <Form.Group>\n          <Form.Label className='form-input-label'>\n            <div>Wpisz kwotę</div>\n            <div>{formState.fromCurrency}</div>\n          </Form.Label>\n          <Form.Control\n            as='input'\n            name='amount'\n            value={formState.amount}\n            onChange={handleChange}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label className='form-input-label'>\n            <div>Wynik</div>\n            <div>{formState.toCurrency}</div>\n          </Form.Label>\n          <Form.Control readOnly value={formState.score} />\n        </Form.Group>\n        <Form.Group>\n          <div className='converter-currency-select-group'>\n            <Form.Control\n              className='conv-select'\n              as='select'\n              name='fromCurrency'\n              value={formState.fromCurrency}\n              onChange={handleChange}\n            >\n              {currencies.map((element, index) => (\n                <option key={index} value={element} name={element}>\n                  {element}\n                </option>\n              ))}\n            </Form.Control>\n            <FontAwesomeIcon\n              className='conv-arrows'\n              icon={faExchangeAlt}\n              data-config-id='icon'\n              size='1x'\n              color='#000'\n            />\n            <Form.Control\n              className='conv-select'\n              as='select'\n              name='toCurrency'\n              value={formState.toCurrency}\n              onChange={handleChange}\n            >\n              {currencies.map((element, index) => (\n                <option key={index} value={element} name={element}>\n                  {element}\n                </option>\n              ))}\n            </Form.Control>\n          </div>\n        </Form.Group>\n        <button className={`converter-btn ${isDisabled ? 'disabled-btn' : ''}`} type='submit' disabled={isDisabled}>\n          KONWERTUJ\n        </button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Converter;\n","import HttpService from '../services/httpService';\nimport ENDPOINTS from '../config/endpoints';\nimport CONFIG from '../config/config';\nimport { convertMock, currenciesMock } from './dataMock'\n\nexport const fetchConversionData = (fromCurrency, toCurrency) => {\n    return new Promise((resolve, reject) => {\n        const httpClient = new HttpService();\n        httpClient.get({\n            endpoint: `${ENDPOINTS.CONVERTER}?q=${fromCurrency}_${toCurrency}&compact=ultra&apiKey=${CONFIG.API_KEY}`,\n            onSuccess: data => resolve(data),\n            onError: error => reject(error)\n        })\n    })\n}\n\nexport const fetchAllCurrencies = () => {\n    return new Promise((resolve, reject) => {\n        const httpClient = new HttpService();\n        httpClient.get({\n            endpoint: `${ENDPOINTS.CURRENCIES}?apiKey=${CONFIG.API_KEY}`,\n            onSuccess: data => resolve(data),\n            onError: error => reject(error)\n        })\n    })\n}\n\nexport const fetchExpenditure = () => {\n    return new Promise((resolve, reject) => {\n        const httpClient = new HttpService();\n        httpClient.get({\n            endpoint: `${ENDPOINTS.USAGE}?apiKey=${CONFIG.API_KEY}`,\n            onSuccess: data => resolve(data),\n            onError: error => reject(error)\n        })\n    })\n}\n\n\nexport const fetchConvertMock = () => {\n    return Promise.resolve(convertMock);\n}\n\nexport const fetchCurrenciesMock = () => {\n    return Promise.resolve(currenciesMock);\n}","import React from \"react\";\nimport \"./history-list.styles.scss\";\nimport { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLongArrowAltRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { clearLocalStorage } from \"../../api/local.api\";\n\nconst HistoryList = ({ historyList, setHistoryList }) => {\n  const handleClick = () => {\n    console.log(\"History cleared\");\n    clearLocalStorage();\n    setHistoryList([]);\n  };\n\n  return (\n    <div className='history-list-main'>\n      <div className='flex-container'>\n        <div className='flex-header'>\n          <div className='flex-hcell'>Data</div>\n          <div className='flex-hcell'>Przed konwersją</div>\n          <div className='flex-hcell'></div>\n          <div className='flex-hcell'>Po konwersji</div>\n        </div>\n        <div className='flex-overflow'>\n          {historyList.length !== 0 ? (\n            historyList.map((element, index) => (\n              <div key={index} className='flex-trow'>\n                <div className='flex-tcell'>{element.today}</div>\n                <div className='flex-tcell'>{element.before}</div>\n                <div className='flex-tcell'>\n                  <FontAwesomeIcon\n                    className=''\n                    icon={faLongArrowAltRight}\n                    data-config-id='icon'\n                    size='1x'\n                    color='#fff'\n                  />\n                </div>\n                <div className='flex-tcell'>{element.after}</div>\n              </div>\n            ))\n          ) : (\n            <div className='flex-empty'>\n              Brak historii konwersji walut\n            </div>\n          )}\n        </div>\n      </div>\n      <Button\n        variant='link'\n        className='history-list-clearbtn'\n        onClick={handleClick}\n      >\n        Wyczyść historię\n      </Button>\n    </div>\n  );\n};\n\nexport default HistoryList;\n","import React from \"react\";\nimport \"./history-tab.styles.scss\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst HistoryTab = ({ isHistoryOn = false, ...otherProps }) => {\n\n  const locPaht =  window.location.pathname;\n\n  return (\n    <div className='history-tab-main'>\n      {isHistoryOn && (\n        <Link\n          to={`${locPaht}${isHistoryOn ? \"\" : \"history\"}`}\n          className='history-tab-link'\n        >\n          <FontAwesomeIcon\n            className='conv-arrows'\n            icon={faTimes}\n            data-config-id='icon'\n            size='1x'\n            color='#fff'\n          />\n        </Link>\n      )}\n      <Link to={`${locPaht}${isHistoryOn ? \"\" : \"history\"}`}>\n        <span className='rotate'>Historia</span>\n      </Link>\n    </div>\n  );\n};\n\nexport default HistoryTab;\n","import React, { useEffect, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { fetchExpenditure } from \"../../api/converter.api\";\n\nconst ApiAlert = ({formState, ...otherProps}) => {\n  const [expenditure, setExpenditure] = useState(0);\n\n  useEffect(() => {\n    fetchExpenditure().then(data => {\n      setExpenditure(data);\n    });\n    // eslint-disable-next-line\n  }, [formState.score]);\n\n  return (\n    <Alert\n      variant={`${expenditure.usage > 80 ? \"danger\" : \"primary\"}`}\n      className='home-usage-alert'\n    >\n      Free API version. 100 usages per hour.{\" \"}\n      {expenditure && <span>{calculateUsage(expenditure.usage)} left.</span>}\n    </Alert>\n  );\n};\n\nexport default ApiAlert;\n\nconst calculateUsage = (usage, limit = 100) => {\n  return limit - usage <= 0 ? 0 : limit - usage;\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./home-page.styles.scss\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Converter from \"../../components/converter/Converter\";\nimport HistoryList from \"../../components/history-list/HistoryList\";\nimport HistoryTab from \"../../components/history-tab/HistoryTab\";\nimport { fetchLocalStorage } from \"../../api/local.api\";\nimport ApiAlert from \"../../components/api-alert/ApiAlert\";\n\nconst initialState = {\n  today: new Date().toJSON().slice(0, 10).split(\"-\").reverse().join(\".\"),\n  fromCurrency: \"\",\n  toCurrency: \"\",\n  amount: 0,\n  score: 0\n};\n\nconst HomePage = ({ isHistoryOn = false, ...otherProps }) => {\n  const [formState, setFormState] = useState(initialState);\n  const [historyList, setHistoryList] = useState(() => {\n    let newLocal = fetchLocalStorage(\"history\");\n    return newLocal ? newLocal : [];\n  });\n\n  return (\n    <>\n      <Container fluid className='home-page-container'>\n        <Row>\n          <Col>\n            <div className='home-page-main'>\n              <Converter\n                isHistoryOn={isHistoryOn}\n                formState={formState}\n                setFormState={setFormState}\n                historyList={historyList}\n                setHistoryList={setHistoryList}\n              />\n              {isHistoryOn && (\n                <HistoryList\n                  historyList={historyList}\n                  setHistoryList={setHistoryList}\n                />\n              )}\n              <HistoryTab isHistoryOn={isHistoryOn} />\n            </div>\n          </Col>\n        </Row>\n        <ApiAlert formState={formState}/>\n      </Container>\n    </>\n  );\n};\n\nexport default HomePage;\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Logowanie błędów\n    // logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // TODO:\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport HomePage from './views/home-page/HomePage';\nimport { Switch, Route } from 'react-router-dom';\nimport ErrorBoundary from './components/error-handling/ErrorBoundary';\n\nfunction App() {\n\n  const locPaht = window.location.pathname;\n\n  return (\n    <div className=\"App\">\n      {/* <ErrorBoundary> */}\n      <Switch>\n        <Route exact path={[`${locPaht}`]}>\n          <HomePage isHistoryOn={false} />\n        </Route>\n        <Route path={[`${locPaht}/history`]}>\n          <HomePage isHistoryOn={true} />\n        </Route>\n      </Switch>\n      {/* </ErrorBoundary> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}