{"version":3,"sources":["views/home-page/HomePage.jsx","components/custom-button/CustomButton.jsx","components/history-tab/HistoryTab.jsx","views/history-page/HistoryPage.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePage","Container","Row","Col","md","span","offset","className","type","CustomButton","props","label","route","history","useHistory","onClick","push","HistoryTab","HistoryPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4WAiCeA,G,MA5BE,WAQf,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,oBACb,gDACA,8BACE,2BAAOC,KAAK,WAGhB,wCACA,0C,eCNGC,G,MAfM,SAAAC,GAAU,IACrBC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,MACTC,EAAUC,cAMhB,OACE,4BAAQP,UAAU,gBAAgBQ,QALhB,WAClBF,EAAQG,KAAKJ,KAKVD,KCDQM,EATI,WACjB,OACE,yBAAKV,UAAU,eACb,kBAAC,EAAD,CAAcI,MAAM,IAAIC,MAAM,MAC9B,kBAAC,EAAD,CAAcD,MAAM,WAAWC,MAAM,eCc5BM,EAlBK,WAClB,OACE,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,6BACE,0CACA,wCACA,6BACE,kBAAC,EAAD,YCMCa,MAbf,WAEE,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,sBAAsBC,UAAWtB,IACnD,kBAAC,IAAD,CAAOqB,KAAK,WAAWC,UAAWJ,OCDtBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAIJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eb7c516f.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./home-page.styles.scss\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport {fetchConversion} from '../../api/converter.api';\n\nconst HomePage = () => {\n\n  \n  const convertCurrency = () => {\n    fetchConversion(10, 'USD', 'PHP')\n  }\n\n\n  return (\n    <Container>\n      <Row>\n        <Col md={{ span: 8, offset: 2 }}>\n          <div className='home-page-content'>\n            <div className='`converter-main`'>\n              <div>Konwerter walut</div>\n              <form>\n                <input type=\"text\"/>\n              </form>\n            </div>\n            <div>History</div>\n            <div>Tab</div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./custom-button.styles.scss\";\n\nconst CustomButton = props => {\n  const { label, route } = props;\n  const history = useHistory();\n\n  const handleClick = () => {\n    history.push(route);\n  };\n\n  return (\n    <button className='custom-button' onClick={handleClick}>\n      {label}\n    </button>\n  );\n};\n\nexport default CustomButton;\n","import React, { useContext } from \"react\";\nimport \"./history-tab.styles.scss\";\nimport CustomButton from \"../../components/custom-button/CustomButton\";\n\nconst HistoryTab = () => {\n  return (\n    <div className='history-tab'>\n      <CustomButton label='x' route='/' />\n      <CustomButton label='Historia' route='/history' />\n    </div>\n  );\n};\n\nexport default HistoryTab;\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport HistoryTab from \"../../components/history-tab/HistoryTab\";\n\nconst HistoryPage = () => {\n  return (\n    <Container>\n      <Row>\n        <Col md={{ span: 8, offset: 2 }}>\n          <div>\n            <div>Converter</div>\n            <div>History</div>\n            <div>\n              <HistoryTab />\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default HistoryPage;\n","import React from 'react';\nimport './App.scss';\nimport HomePage from './views/home-page/HomePage';\nimport HistoryPage from './views/history-page/HistoryPage';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={HomePage} />\n        <Route exact path='/currency-converter' component={HomePage} />\n        <Route path='/history' component={HistoryPage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}